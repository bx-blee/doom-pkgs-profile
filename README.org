
#+TITLE: pkgs-profile
#+OPTIONS: toc:4

=pkgs-profile= is a general purpose emacs profiles-manager that facilitates
installation of a consistent set of
pinned packages based on their commitHash through straight.el.
It is a layer on top of =straight.el= and augments it with abstractions of
collections and externally specified profiles which mimic the paradigm of Debian's /etc/apt/sources.list.

* Table Of Contents     :TOC:
- [[#summary][Summary]]
  - [[#use-of-bpkgstraightinstall-subjectpackage][Use Of (b:pkg:straight|install *subjectPackage*)]]
  - [[#use-of-bpkgstraightprofiledinstall-profilename-subjectpackage][Use Of (b:pkg:straight|profiledInstall *profileName* *subjectPackage*)]]
  - [[#use-of-bpkgstraightorphaninstall-subjectpackage][Use Of (b:pkg:straight|orphanInstall *subjectPackage*)]]
- [[#about-pkgs-profile-blee3-pkgs-profile-blee-bisos-and-bystar][About pkgs-profile, blee3-pkgs-profile, Blee, BISOS and ByStar]]
- [[#bisos--blees-git-oriented-profiled-packages-management-framework][BISOS & Blee's Git Oriented Profiled Packages Management Framework]]
  - [[#key-expected-characteristics-of-profiled-package-management-frameworks][Key Expected Characteristics Of Profiled Package Management Frameworks]]
  - [[#overview-of-a-generalized--profiled-packages-management-framework][Overview Of A Generalized  Profiled Packages Management Framework]]
  - [[#key-concepts][Key Concepts:]]

* Summary

[Legend: =pkgOrFile= is for package names, ~form~ is a lisp construct, *concept* is a concept, *args* in . ]

=pkgs-profile= sits on top of =straight.el= and ~straight-use-package~ and
installs packages that are pre-specified at a desired *commitHash* and labeled
with a *collectionName:profileName* through straight's ~straight-current-profile~
machinary.

The full consistent set of
pinned packages prefixed with *b:pkgsProfile:collection:* is passed to
straight through an ~advice-add~  around ~straight--lockfile-read-all~

Based on this, straight package installs are managed with =pkgs-profile= and as a result the set remains
consistent and stable.

The complete set of consitent packages is specified as a list of tupples (alist) in the form of
(pkgName . commitHash) consistent with the type of the result of ~(straight--lockfile-read-all)~.

Each *b:pkgsProfile:<collectionName>:<profileName>* is such an alist.
Consider blee3 as an example of a collection. =blee3-pkgs-profile=
(https://github.com/bx-blee/blee3-pkgs-profile) emacs package uses
=pkgs-profile= through specification of  ~b:pkgsProfile:collection:default~ being ~b:pkgsProfile:collection:blee3~.
The above then provides for reference to a pinned-package through *collectionName:profileName:packageName*.

In this case, =blee3-pkgs-profile= sits on top of =pkgs-profile= which sits on top of =straight.el=.

=blee3-pkgs-profile= binds itself to  =pkgs-profile=, through:
#+begin_src emacs-lisp
   (setq b:pkgsProfile:collection:default b:pkgsProfile:collection:blee3)
   (setq b:pkgsProfile:orphan 'b:pkgsProfile:blee3:orphan)
   (setq b:pkgsProfile:native 'b:pkgsProfile:blee3:native)
   (b:pkgsProfile:collection|prepare)
   (b:pkgsProfile:collection:straight--lockfile-read-all|advice-add)
#+end_src

** Use Of (b:pkg:straight|install *subjectPackage*)

Thereafter, a given package at a specific commitHash which is specified in one of the
*b:pkgsProfile:blee3:* profiles included in ~b:pkgsProfile:collection:blee3~ collection
can very conveniently be installed, like so:
#+begin_src emacs-lisp
(b:pkg:straight|install subjectPackageInfo)
#+end_src

For a valid ~subjectPackage~, this results in one of two things.
When ~subjectPackage~ is found, it is installed at the specified commitHash.
and it is tagged with the profileName of the  ~b:pkgsProfile:<collectionName>:<profileName>~
in which ~subjectPackage~ was found. (Through ~b:pkg:straight|profiledInstall~)
When ~subjectPackage~ is not found, the latest is installed and it is tagged with the *profileName*
assocaied with ~b:pkgsProfile:orphan~. (Through ~b:pkg:straight|orphanInstall~)

~b:pkg:straight|install~ is the most common way of installing packages.
It parallels ~straight-use-package~ but augments it with implicit specification of
*commitHash* and implicit specification of a *profileName*

See DocStr for deatils.

** Use Of (b:pkg:straight|profiledInstall *profileName* *subjectPackage*)

Use this when you want to be explicit about which profileName to use.
Use this when you know that *subjectPackage* is valid in the scope of *profileName*

See DocStr for deatils.

** Use Of (b:pkg:straight|orphanInstall *subjectPackage*)

Install *subjectPackage* as orphan.
~b:pkg:straight|orphanInstall~ in turn goes through ~b:pkg:straight|profiledInstall~
with *profileName* being ~b:pkgsProfile:orphan~

See DocStr for deatils.


In terms of parallels between emacs's this packaging model and debian's
packaging model one can consider:

| *Debian Apt Model*                          | *Emacs-pkgs-profile Model*        |
|--------------------------------------------|----------------------------------|
| dpkg                                       | straight                         |
| apt                                        | pkgs-profile + straight          |
| /etc/apt/sources.list                      | b:pkgsProfile:collection:default |
| deb http://deb.debian.org/debian/ bullseye | blee3:pkgs-profile               |

Emacs' packaging model has not been well thought through.
=pkgs-profile= is an attempt at evolving that model.
https://github.com/bx-blee
=straight.el= also introduces the concept of profiles. But the concept of
b:packagesProfile:<set> is different from that of straight's.
We use ~(straight-freeze-versions)~ and the resulting ~/versions/file.el~
for verification and development of b:pkgsProfile:collection.

* About pkgs-profile, blee3-pkgs-profile, Blee, BISOS and ByStar

pkgs-profile and blee3-pkgs-profile are part of Blee (BISOS, Libre-Halaal Emacs Environment).
https://github.com/bx-blee

Blee is integrated with BISOS --- (The Universal BISOS: ByStar Internet Services Operating System)
http://www.by-star.net/PLPC/180047

BISOS facilitates development of The Libre-Halaal By* (ByStar) Digital Ecosystem.
ByStar is a unified and non-proprietary, autonomy and privacy oriented digital ecosystem.
http://www.by-star.net/

So, it is an understatement to say that =pkgs-profile= is part of a much bigger picture.

The broader domain of =pkgs-profile= is that of a "Git Oriented Profiles Packages Management Framework"

* BISOS & Blee's Git Oriented Profiled Packages Management Framework

Based on key experiences of the past two decades, and in particular the lessons
learned from Debian's packaging system and uses of git as a version referenceable
file system; certain expectations have evolved for packages management framework.

** Key Expected Characteristics Of Profiled Package Management Frameworks

The following characterisics are expected:

- Provide a stable and reproducible environment based on specified profiles.
- Allow for evolution of packages without impacting exisiting profiles.
- Provision of mapping of all source and binary packages to git repos.
- Universal reference to packages as git repos and commmitHashes --- allowing
  for unofficial development and adoption of packages.
- Convenient packaging standards.
- Convenience in extending profiles.

** Overview Of A Generalized  Profiled Packages Management Framework

Emacs packaging, packages and use of packages has been evolving in adhoc manner
without a roadmap.


Without such a roadmap, we could easily get lost and reinvent and diverge.
To some extent that (getting lost) has already happened. Some symptoms are visible.

- package.el (the built-in package manager in emacs) has proven to be a dead-end.

- ELPA (Emacs Lisp Package Archive) is no longer all that relevant. Why should
  there be an official one? Diversity of ad-hoc packages is great and quality
  control, rating, indexing and publishing are all better done outside of the
  emacs substrate organization anyway.

- straight.el as a replacement for package.el is conflicted in the scope that it should cover.

- use-package hardly knows its place. Is it really necessary? It does not address the concept of
  profiles. Then leaf.el does more of the same.
  Neither of these deal with the concept of realm extensions.

- Then come the likes of doom which address the profiling concept, but just for
  themselves and not as a general solution.

So, in Blee and in pkgs-profile, in order to deal with these symptoms, we first
focus on concepts, layering and scopes --- in a practical, pragmatic and tangible way.
We do so, primarily in the context of Blee. But everything is generalized enough to
also be used outside of Blee.

First we introduce the bigger picture, then we walk through its key concepts.

*** TODO Picture comes here and we walk through it.

** Key Concepts:

Refering to the above model and framework and in the specific context of Blee
packages, we enumerate the following concepts.

The above picture and the below concept descriptios establish a model and terminology
that can provide for a roadmap.


*** Profiles Aware Package Manager --- b:pkg:straight+straight.el

First, we disable the built-in emacs packages manager.

Instaed of the built-in package.el, we have evolved straight.el on its fringes
in a variety of ways so that it can properly function as a profiles aware
package manager.

We offer these conceptual evolutions, to straight.el. At a minimum, we hope that
straight.el developers would consider:

- =pkgs-profile=  modification involve addition of ~advice-add~ around an internal function:
~straight--lockfile-read-all~. This needs to be cleaned up and revisited.

- Addition of :ref keyword as in https://github.com/radian-software/straight.el/issues/246
needs to be revisited in light of =pkgs-profile=. How is :ref to deal with dependencies?
In =pkgs-profile=, the :ref of the package and its dependencies are pre-specified.

- Concept and purpose of straight-profiles and b:pkgsProfile: are different.
These need to be aligned.

- straight.el needs to provide needed interfaces to accept b:pkgsProfile:collection-s as input.

*** Packages Profiles

A list of package-names pinned at specific commitHash-s, which create consistent and stable sets.

Similar to a line entry in /etc/apt/sources.list.

*** Profiles Manager --- pkgs-profile As A Pure Layer On Top Of straight.el

A "Profiles Manager" inputs profile collections to the "Profiles Aware Package Manager".

Right now pkgs-profile and straight.el are somewhat intertwined.
We should move towards

*** <<Profiles Collections>>

A list of Packages Profiles which aim to create a consistent and stable totality.

Similar to the full /etc/apt/sources.list.

*** Packages Adoption

By package adoption, we mean:

1 - *Installation*) Selection of packages from the totality of [[Profiles Collections]] and installing them.
2 - *Configuration*) Configuration of a package or harmonious configuration of groups of related packages.
3 - *Realm Extension Hooks*) Allowing for Site/User extended configurations.

*** Initial (built-in) Packages Adoptions

Blee comes pre-loaded adopted packages in the initial environment.

*** Individual Package Adoption Installer And Configuration Managers

For individual packages we use bnpa:pkgName.el which uses
COMEEGA dblocks heavily.

*** Grouped Package Installer And Configuration Managers

Blee does not use use-package or leaf.el or ...

For individual packages we use bgpa:pkgName.el which uses
COMEEGA dblocks heavily.

*** Realm Extensions For Individual Package Configuration

Site and users extenstions.

*** Realm Extensions For Group Package Configuration

Site and users extenstions.
